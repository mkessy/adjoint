{"numTotalTestSuites":46,"numPassedTestSuites":43,"numFailedTestSuites":3,"numPendingTestSuites":0,"numTotalTests":89,"numPassedTests":83,"numFailedTests":1,"numPendingTests":1,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1754297116056,"success":false,"testResults":[{"assertionResults":[],"startTime":1754297116056,"endTime":1754297116056,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/Dummy.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph Algebras"],"fullName":"Graph Algebras should perform a catamorphism to count nodes","status":"passed","title":"should perform a catamorphism to count nodes","duration":0.647666000000072,"failureMessages":[],"meta":{}}],"startTime":1754297117004,"endTime":1754297117004.6477,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/algebra.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph API"],"fullName":"Graph API should create a graph from a schema","status":"passed","title":"should create a graph from a schema","duration":0.41341699999998127,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph API"],"fullName":"Graph API should apply a transformation to a graph","status":"passed","title":"should apply a transformation to a graph","duration":0.06270900000004076,"failureMessages":[],"meta":{}}],"startTime":1754297116998,"endTime":1754297116999.0627,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph.test.ts"},{"assertionResults":[{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should start with empty state and handle first graph commit","status":"passed","title":"should start with empty state and handle first graph commit","duration":16.159209000000033,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should handle undo/redo operations using Ref.modify","status":"passed","title":"should handle undo/redo operations using Ref.modify","duration":10.296290999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should demonstrate concurrent reactive streams","status":"passed","title":"should demonstrate concurrent reactive streams","duration":16.227499999999964,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should handle history truncation when branching from middle","status":"passed","title":"should handle history truncation when branching from middle","duration":7.108375000000024,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should maintain history size limits efficiently","status":"passed","title":"should maintain history size limits efficiently","duration":3.6673749999999927,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should demonstrate performance benefits of Ref.modify","status":"passed","title":"should demonstrate performance benefits of Ref.modify","duration":12.216457999999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService Integration"],"fullName":"WorkspaceStateService Integration should work with utility functions","status":"passed","title":"should work with utility functions","duration":6.511375000000044,"failureMessages":[],"meta":{}}],"startTime":1754297116553,"endTime":1754297116625.5115,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/engine/WorkspaceStateService.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph Algebra","count algebra"],"fullName":"Graph Algebra count algebra should count all nodes when no predicate is provided","status":"passed","title":"should count all nodes when no predicate is provided","duration":2.6743339999999307,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","count algebra"],"fullName":"Graph Algebra count algebra should count nodes matching predicate","status":"passed","title":"should count nodes matching predicate","duration":0.6575000000000273,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","count algebra"],"fullName":"Graph Algebra count algebra should return 0 when no nodes match predicate","status":"passed","title":"should return 0 when no nodes match predicate","duration":0.38204099999995833,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","collectIds algebra"],"fullName":"Graph Algebra collectIds algebra should collect all node IDs in traversal order","status":"passed","title":"should collect all node IDs in traversal order","duration":1.0866250000000264,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","collectIds algebra"],"fullName":"Graph Algebra collectIds algebra should handle empty graphs","status":"passed","title":"should handle empty graphs","duration":0.45129099999996924,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","drawTree algebra"],"fullName":"Graph Algebra drawTree algebra should create string representation of single node","status":"passed","title":"should create string representation of single node","duration":0.38045900000008714,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","drawTree algebra"],"fullName":"Graph Algebra drawTree algebra should handle nodes with children","status":"passed","title":"should handle nodes with children","duration":0.3860420000000886,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Algebraic Laws"],"fullName":"Graph Algebra Algebraic Laws should satisfy catamorphism laws","status":"passed","title":"should satisfy catamorphism laws","duration":0.2377920000000131,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Algebraic Laws"],"fullName":"Graph Algebra Algebraic Laws should be compositional","status":"passed","title":"should be compositional","duration":0.41804100000001654,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Performance and Edge Cases"],"fullName":"Graph Algebra Performance and Edge Cases should handle large graphs efficiently","status":"passed","title":"should handle large graphs efficiently","duration":20.250666000000024,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Performance and Edge Cases"],"fullName":"Graph Algebra Performance and Edge Cases should handle circular references gracefully","status":"skipped","title":"should handle circular references gracefully","failureMessages":[],"meta":{}}],"startTime":1754297116557,"endTime":1754297116584.2507,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/GraphAlgebra.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph Composition","from() - Identity morphism creation"],"fullName":"Graph Composition from() - Identity morphism creation should create a composition with a single schema node","status":"passed","title":"should create a composition with a single schema node","duration":1.0980420000000777,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","from() - Identity morphism creation"],"fullName":"Graph Composition from() - Identity morphism creation should maintain type safety with branded Composition type","status":"passed","title":"should maintain type safety with branded Composition type","duration":0.14570800000001327,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","transform() - Function composition"],"fullName":"Graph Composition transform() - Function composition should compose two transformations correctly","status":"passed","title":"should compose two transformations correctly","duration":2.5589590000000726,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","transform() - Function composition"],"fullName":"Graph Composition transform() - Function composition should maintain proper edge relationships","status":"passed","title":"should maintain proper edge relationships","duration":0.3772920000000113,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","transform() - Function composition"],"fullName":"Graph Composition transform() - Function composition should handle chain of transformations","status":"passed","title":"should handle chain of transformations","duration":0.8463339999999562,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","Mathematical Properties"],"fullName":"Graph Composition Mathematical Properties should satisfy identity law: from(A).transform(id) ≡ from(A)","status":"passed","title":"should satisfy identity law: from(A).transform(id) ≡ from(A)","duration":0.27045799999996234,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","Mathematical Properties"],"fullName":"Graph Composition Mathematical Properties should satisfy associativity: (f ∘ g) ∘ h ≡ f ∘ (g ∘ h)","status":"passed","title":"should satisfy associativity: (f ∘ g) ∘ h ≡ f ∘ (g ∘ h)","duration":0.7298329999999851,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","Error Cases"],"fullName":"Graph Composition Error Cases should handle missing target schema gracefully","status":"passed","title":"should handle missing target schema gracefully","duration":0.10291700000004766,"failureMessages":[],"meta":{}}],"startTime":1754297116616,"endTime":1754297116623.103,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/GraphComposition.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should filter nodes by predicate","status":"passed","title":"should filter nodes by predicate","duration":1.9798749999999927,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should preserve graph structure","status":"passed","title":"should preserve graph structure","duration":0.3870840000000726,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should handle empty results","status":"passed","title":"should handle empty results","duration":0.08887500000003001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should be idempotent: filter(P, filter(P, G)) = filter(P, G)","status":"passed","title":"should be idempotent: filter(P, filter(P, G)) = filter(P, G)","duration":0.31195900000000165,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should find first matching node","status":"passed","title":"should find first matching node","duration":1.1213749999999436,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should return None when no match found","status":"passed","title":"should return None when no match found","duration":0.21395800000004783,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should handle empty graphs","status":"passed","title":"should handle empty graphs","duration":0.08029199999998582,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should be deterministic for same predicate","status":"passed","title":"should be deterministic for same predicate","duration":0.27475000000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should sort nodes according to ordering","status":"passed","title":"should sort nodes according to ordering","duration":0.24987499999997453,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should preserve all nodes","status":"passed","title":"should preserve all nodes","duration":0.1604170000000522,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should handle empty graphs","status":"passed","title":"should handle empty graphs","duration":0.05033400000002075,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should be stable for equal elements","status":"passed","title":"should be stable for equal elements","duration":0.16970800000001418,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should satisfy ordering laws","status":"passed","title":"should satisfy ordering laws","duration":0.22820899999999256,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should reverse correctly with reverse ordering","status":"passed","title":"should reverse correctly with reverse ordering","duration":0.1602500000000191,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Operation Composition"],"fullName":"Graph Operations Operation Composition should compose filter and sort correctly","status":"passed","title":"should compose filter and sort correctly","duration":0.1652080000000069,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Operation Composition"],"fullName":"Graph Operations Operation Composition should compose filter and find correctly","status":"passed","title":"should compose filter and find correctly","duration":0.18666700000005676,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Performance and Edge Cases"],"fullName":"Graph Operations Performance and Edge Cases should handle large graphs efficiently","status":"passed","title":"should handle large graphs efficiently","duration":9.997540999999956,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Performance and Edge Cases"],"fullName":"Graph Operations Performance and Edge Cases should maintain referential transparency","status":"passed","title":"should maintain referential transparency","duration":0.20404199999995853,"failureMessages":[],"meta":{}}],"startTime":1754297116612,"endTime":1754297116628.204,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/GraphOperations.test.ts"},{"assertionResults":[{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter is idempotent: filter(P, filter(P, G)) = filter(P, G)","status":"passed","title":"filter is idempotent: filter(P, filter(P, G)) = filter(P, G)","duration":11,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter preserves predicate satisfaction","status":"passed","title":"filter preserves predicate satisfaction","duration":6.856457999999975,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter is monotonic: |filter(P, G)| ≤ |G|","status":"passed","title":"filter is monotonic: |filter(P, G)| ≤ |G|","duration":4.159959000000072,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter with always-true predicate is identity","status":"passed","title":"filter with always-true predicate is identity","duration":10.544333000000051,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter with always-false predicate yields empty graph","status":"passed","title":"filter with always-false predicate yields empty graph","duration":4.0532499999999345,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties AND is commutative: P ∧ Q ≡ Q ∧ P","status":"passed","title":"AND is commutative: P ∧ Q ≡ Q ∧ P","duration":1.1489999999998872,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties AND is associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","status":"passed","title":"AND is associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","duration":1.3161660000000666,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties OR is commutative: P ∨ Q ≡ Q ∨ P","status":"passed","title":"OR is commutative: P ∨ Q ≡ Q ∨ P","duration":1.0001669999999194,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties De Morgan's law: ¬(P ∧ Q) ≡ ¬P ∨ ¬Q","status":"passed","title":"De Morgan's law: ¬(P ∧ Q) ≡ ¬P ∨ ¬Q","duration":1.0479579999998805,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties Double negation: ¬¬P ≡ P","status":"passed","title":"Double negation: ¬¬P ≡ P","duration":0.903957999999875,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Algebra Properties"],"fullName":"Property-Based Tests Algebra Properties count algebra is non-negative","status":"passed","title":"count algebra is non-negative","duration":4.305832999999893,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Algebra Properties"],"fullName":"Property-Based Tests Algebra Properties count with predicate ≤ count without predicate","status":"passed","title":"count with predicate ≤ count without predicate","duration":5.7587089999999534,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Algebra Properties"],"fullName":"Property-Based Tests Algebra Properties collectIds preserves node count","status":"passed","title":"collectIds preserves node count","duration":1.6554999999998472,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants find returns None for empty graphs","status":"passed","title":"find returns None for empty graphs","duration":0.3118329999999787,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants find result satisfies predicate when Some","status":"passed","title":"find result satisfies predicate when Some","duration":4.103917000000138,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants sort preserves node count","status":"passed","title":"sort preserves node count","duration":3.4182499999999436,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants sort is deterministic","status":"failed","title":"sort is deterministic","duration":2.0348750000000564,"failureMessages":["Error: Property failed after 1 tests\n{ seed: -146930223, path: \"0:0\", endOnFailure: true }\nCounterexample: [{\"id\":\"graph-7fa8b1bd-d2e2-41e8-bd06-151d61e798cb\",\"nodes\":{\n  \"_id\": \"HashMap\",\n  \"values\": []\n},\"edges\":{\n  \"_id\": \"Chunk\",\n  \"values\": []\n},\"_tag\":\"Graph\"}]\nShrunk 1 time(s)\nGot error: Property failed by returning false\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/utils/RunDetailsFormatter.js:126:15)\n    at throwIfFailed (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/utils/RunDetailsFormatter.js:138:11)\n    at reportRunDetails (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/utils/RunDetailsFormatter.js:151:16)\n    at Module.assert (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/Runner.js:69:9)\n    at /Users/pooks/Dev/adjoint/packages/domain/test/graph/PropertyBasedTests.test.ts:344:17\n    at file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)"],"meta":{}},{"ancestorTitles":["Property-Based Tests","Composition Laws"],"fullName":"Property-Based Tests Composition Laws filter composition: filter(P, filter(Q, G)) = filter(P ∧ Q, G)","status":"pending","title":"filter composition: filter(P, filter(Q, G)) = filter(P ∧ Q, G)","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Composition Laws"],"fullName":"Property-Based Tests Composition Laws filter distributes over union predicates","status":"pending","title":"filter distributes over union predicates","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Error Handling Properties"],"fullName":"Property-Based Tests Error Handling Properties operations on empty graphs don't throw","status":"pending","title":"operations on empty graphs don't throw","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Error Handling Properties"],"fullName":"Property-Based Tests Error Handling Properties malformed predicates don't crash system","status":"pending","title":"malformed predicates don't crash system","failureMessages":[],"meta":{}}],"startTime":1754297116977,"endTime":1754297117041.035,"status":"failed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/PropertyBasedTests.test.ts"},{"assertionResults":[{"ancestorTitles":["Node Capabilities","NodePredicate"],"fullName":"Node Capabilities NodePredicate should correctly identify node types","status":"passed","title":"should correctly identify node types","duration":0.9125420000000304,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodePredicate"],"fullName":"Node Capabilities NodePredicate should have unique identifiers","status":"passed","title":"should have unique identifiers","duration":0.3202080000000933,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should satisfy logical AND truth table","status":"passed","title":"should satisfy logical AND truth table","duration":0.1790840000001026,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should be commutative: P ∧ Q ≡ Q ∧ P","status":"passed","title":"should be commutative: P ∧ Q ≡ Q ∧ P","duration":0.0811670000000504,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should be associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","status":"passed","title":"should be associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","duration":0.07649999999989632,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should have identity element: P ∧ true ≡ P","status":"passed","title":"should have identity element: P ∧ true ≡ P","duration":0.06945799999994051,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","or combinator"],"fullName":"Node Capabilities Predicate Combinators or combinator should satisfy logical OR truth table","status":"passed","title":"should satisfy logical OR truth table","duration":0.13200000000006185,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","or combinator"],"fullName":"Node Capabilities Predicate Combinators or combinator should be commutative: P ∨ Q ≡ Q ∨ P","status":"passed","title":"should be commutative: P ∨ Q ≡ Q ∨ P","duration":0.0632500000001528,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","or combinator"],"fullName":"Node Capabilities Predicate Combinators or combinator should have identity element: P ∨ false ≡ P","status":"passed","title":"should have identity element: P ∨ false ≡ P","duration":0.07466700000009041,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","not combinator"],"fullName":"Node Capabilities Predicate Combinators not combinator should satisfy logical NOT","status":"passed","title":"should satisfy logical NOT","duration":0.10429199999998673,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","not combinator"],"fullName":"Node Capabilities Predicate Combinators not combinator should satisfy double negation: ¬¬P ≡ P","status":"passed","title":"should satisfy double negation: ¬¬P ≡ P","duration":0.06458400000019537,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","not combinator"],"fullName":"Node Capabilities Predicate Combinators not combinator should satisfy De Morgan's laws","status":"passed","title":"should satisfy De Morgan's laws","duration":0.08570800000006784,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","CapabilityRegistry"],"fullName":"Node Capabilities CapabilityRegistry should register and retrieve predicates","status":"passed","title":"should register and retrieve predicates","duration":3.7730000000001382,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","CapabilityRegistry"],"fullName":"Node Capabilities CapabilityRegistry should handle multiple predicates","status":"passed","title":"should handle multiple predicates","duration":0.7466660000000047,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","CapabilityRegistry"],"fullName":"Node Capabilities CapabilityRegistry should maintain predicate isolation","status":"passed","title":"should maintain predicate isolation","duration":0.6573750000000018,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeEquivalence"],"fullName":"Node Capabilities NodeEquivalence should be reflexive: a ≡ a","status":"passed","title":"should be reflexive: a ≡ a","duration":0.07862500000010186,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeEquivalence"],"fullName":"Node Capabilities NodeEquivalence should be symmetric: a ≡ b ⟹ b ≡ a","status":"passed","title":"should be symmetric: a ≡ b ⟹ b ≡ a","duration":0.05700000000001637,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeEquivalence"],"fullName":"Node Capabilities NodeEquivalence should be transitive: a ≡ b ∧ b ≡ c ⟹ a ≡ c","status":"passed","title":"should be transitive: a ≡ b ∧ b ≡ c ⟹ a ≡ c","duration":0.0681250000000091,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeOrdering"],"fullName":"Node Capabilities NodeOrdering should be antisymmetric: a ≤ b ∧ b ≤ a ⟹ a = b","status":"passed","title":"should be antisymmetric: a ≤ b ∧ b ≤ a ⟹ a = b","duration":0.05370900000002621,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeOrdering"],"fullName":"Node Capabilities NodeOrdering should be transitive: a ≤ b ∧ b ≤ c ⟹ a ≤ c","status":"passed","title":"should be transitive: a ≤ b ∧ b ≤ c ⟹ a ≤ c","duration":0.10608400000000984,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeOrdering"],"fullName":"Node Capabilities NodeOrdering should be total: ∀a,b: a ≤ b ∨ b ≤ a","status":"passed","title":"should be total: ∀a,b: a ≤ b ∨ b ≤ a","duration":0.05275000000006003,"failureMessages":[],"meta":{}}],"startTime":1754297117004,"endTime":1754297117012.1062,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/node/NodeCapabilities.test.ts"}]}