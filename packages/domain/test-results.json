{"numTotalTestSuites":47,"numPassedTestSuites":47,"numFailedTestSuites":0,"numPendingTestSuites":0,"numTotalTests":90,"numPassedTests":89,"numFailedTests":0,"numPendingTests":1,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1754480910042,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["Dummy"],"fullName":"Dummy should pass","status":"passed","title":"should pass","duration":0.5338339999999562,"failureMessages":[],"meta":{}}],"startTime":1754480910688,"endTime":1754480910688.534,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/Dummy.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph Algebras"],"fullName":"Graph Algebras should perform a catamorphism to count nodes","status":"passed","title":"should perform a catamorphism to count nodes","duration":0.37479199999984303,"failureMessages":[],"meta":{}}],"startTime":1754480910812,"endTime":1754480910812.3748,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/algebra.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph API"],"fullName":"Graph API should create a graph from a schema","status":"passed","title":"should create a graph from a schema","duration":0.3655420000000049,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph API"],"fullName":"Graph API should apply a transformation to a graph","status":"passed","title":"should apply a transformation to a graph","duration":0.05770900000004531,"failureMessages":[],"meta":{}}],"startTime":1754480910787,"endTime":1754480910788.0576,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph.test.ts"},{"assertionResults":[{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should start with empty state and handle first graph commit","status":"passed","title":"should start with empty state and handle first graph commit","duration":13.252457999999933,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should handle undo/redo operations using Ref.modify","status":"passed","title":"should handle undo/redo operations using Ref.modify","duration":15.762083999999959,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should demonstrate concurrent reactive streams","status":"passed","title":"should demonstrate concurrent reactive streams","duration":10.614833999999973,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should handle history truncation when branching from middle","status":"passed","title":"should handle history truncation when branching from middle","duration":4.236666000000014,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should maintain history size limits efficiently","status":"passed","title":"should maintain history size limits efficiently","duration":5.85266700000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService"],"fullName":"WorkspaceStateService should demonstrate performance benefits of Ref.modify","status":"passed","title":"should demonstrate performance benefits of Ref.modify","duration":9.651250000000005,"failureMessages":[],"meta":{}},{"ancestorTitles":["WorkspaceStateService Integration"],"fullName":"WorkspaceStateService Integration should work with utility functions","status":"passed","title":"should work with utility functions","duration":2.884249999999952,"failureMessages":[],"meta":{}}],"startTime":1754480910446,"endTime":1754480910508.8843,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/engine/WorkspaceStateService.test.ts"},{"assertionResults":[{"ancestorTitles":["Node Capabilities","NodePredicate"],"fullName":"Node Capabilities NodePredicate should correctly identify node types","status":"passed","title":"should correctly identify node types","duration":0.8479580000000624,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodePredicate"],"fullName":"Node Capabilities NodePredicate should have unique identifiers","status":"passed","title":"should have unique identifiers","duration":0.303916000000072,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should satisfy logical AND truth table","status":"passed","title":"should satisfy logical AND truth table","duration":0.1712089999998625,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should be commutative: P ∧ Q ≡ Q ∧ P","status":"passed","title":"should be commutative: P ∧ Q ≡ Q ∧ P","duration":0.07950000000005275,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should be associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","status":"passed","title":"should be associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","duration":0.07795899999996436,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should have identity element: P ∧ true ≡ P","status":"passed","title":"should have identity element: P ∧ true ≡ P","duration":0.06979200000000674,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","or combinator"],"fullName":"Node Capabilities Predicate Combinators or combinator should satisfy logical OR truth table","status":"passed","title":"should satisfy logical OR truth table","duration":0.17675000000008367,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","or combinator"],"fullName":"Node Capabilities Predicate Combinators or combinator should be commutative: P ∨ Q ≡ Q ∨ P","status":"passed","title":"should be commutative: P ∨ Q ≡ Q ∨ P","duration":0.06408299999998235,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","or combinator"],"fullName":"Node Capabilities Predicate Combinators or combinator should have identity element: P ∨ false ≡ P","status":"passed","title":"should have identity element: P ∨ false ≡ P","duration":0.0653749999999036,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","not combinator"],"fullName":"Node Capabilities Predicate Combinators not combinator should satisfy logical NOT","status":"passed","title":"should satisfy logical NOT","duration":0.09908399999994799,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","not combinator"],"fullName":"Node Capabilities Predicate Combinators not combinator should satisfy double negation: ¬¬P ≡ P","status":"passed","title":"should satisfy double negation: ¬¬P ≡ P","duration":0.060000000000172804,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","not combinator"],"fullName":"Node Capabilities Predicate Combinators not combinator should satisfy De Morgan's laws","status":"passed","title":"should satisfy De Morgan's laws","duration":0.08624999999983629,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","CapabilityRegistry"],"fullName":"Node Capabilities CapabilityRegistry should register and retrieve predicates","status":"passed","title":"should register and retrieve predicates","duration":3.3144580000000587,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","CapabilityRegistry"],"fullName":"Node Capabilities CapabilityRegistry should handle multiple predicates","status":"passed","title":"should handle multiple predicates","duration":0.46804100000008475,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","CapabilityRegistry"],"fullName":"Node Capabilities CapabilityRegistry should maintain predicate isolation","status":"passed","title":"should maintain predicate isolation","duration":0.539417000000185,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeEquivalence"],"fullName":"Node Capabilities NodeEquivalence should be reflexive: a ≡ a","status":"passed","title":"should be reflexive: a ≡ a","duration":0.06541599999991377,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeEquivalence"],"fullName":"Node Capabilities NodeEquivalence should be symmetric: a ≡ b ⟹ b ≡ a","status":"passed","title":"should be symmetric: a ≡ b ⟹ b ≡ a","duration":0.05787499999996726,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeEquivalence"],"fullName":"Node Capabilities NodeEquivalence should be transitive: a ≡ b ∧ b ≡ c ⟹ a ≡ c","status":"passed","title":"should be transitive: a ≡ b ∧ b ≡ c ⟹ a ≡ c","duration":0.0627079999999296,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeOrdering"],"fullName":"Node Capabilities NodeOrdering should be antisymmetric: a ≤ b ∧ b ≤ a ⟹ a = b","status":"passed","title":"should be antisymmetric: a ≤ b ∧ b ≤ a ⟹ a = b","duration":0.04966699999999946,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeOrdering"],"fullName":"Node Capabilities NodeOrdering should be transitive: a ≤ b ∧ b ≤ c ⟹ a ≤ c","status":"passed","title":"should be transitive: a ≤ b ∧ b ≤ c ⟹ a ≤ c","duration":0.09187499999984539,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeOrdering"],"fullName":"Node Capabilities NodeOrdering should be total: ∀a,b: a ≤ b ∨ b ≤ a","status":"passed","title":"should be total: ∀a,b: a ≤ b ∨ b ≤ a","duration":0.05045900000004622,"failureMessages":[],"meta":{}}],"startTime":1754480911059,"endTime":1754480911066.0918,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/node/NodeCapabilities.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph Algebra","count algebra"],"fullName":"Graph Algebra count algebra should count all nodes when no predicate is provided","status":"passed","title":"should count all nodes when no predicate is provided","duration":2.670458999999937,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","count algebra"],"fullName":"Graph Algebra count algebra should count nodes matching predicate","status":"passed","title":"should count nodes matching predicate","duration":0.3707919999999376,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","count algebra"],"fullName":"Graph Algebra count algebra should return 0 when no nodes match predicate","status":"passed","title":"should return 0 when no nodes match predicate","duration":0.24712499999998272,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","collectIds algebra"],"fullName":"Graph Algebra collectIds algebra should collect all node IDs in traversal order","status":"passed","title":"should collect all node IDs in traversal order","duration":0.4556249999999409,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","collectIds algebra"],"fullName":"Graph Algebra collectIds algebra should handle empty graphs","status":"passed","title":"should handle empty graphs","duration":0.2971670000000586,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","drawTree algebra"],"fullName":"Graph Algebra drawTree algebra should create string representation of single node","status":"passed","title":"should create string representation of single node","duration":0.33133299999997234,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","drawTree algebra"],"fullName":"Graph Algebra drawTree algebra should handle nodes with children","status":"passed","title":"should handle nodes with children","duration":0.33379200000001674,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Algebraic Laws"],"fullName":"Graph Algebra Algebraic Laws should satisfy catamorphism laws","status":"passed","title":"should satisfy catamorphism laws","duration":0.21958300000005693,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Algebraic Laws"],"fullName":"Graph Algebra Algebraic Laws should be compositional","status":"passed","title":"should be compositional","duration":0.33566700000005767,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Performance and Edge Cases"],"fullName":"Graph Algebra Performance and Edge Cases should handle large graphs efficiently","status":"passed","title":"should handle large graphs efficiently","duration":15.933957999999961,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Performance and Edge Cases"],"fullName":"Graph Algebra Performance and Edge Cases should handle circular references gracefully","status":"skipped","title":"should handle circular references gracefully","failureMessages":[],"meta":{}}],"startTime":1754480910446,"endTime":1754480910467.9338,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/GraphAlgebra.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph Composition","from() - Identity morphism creation"],"fullName":"Graph Composition from() - Identity morphism creation should create a composition with a single schema node","status":"passed","title":"should create a composition with a single schema node","duration":1.0335000000000036,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","from() - Identity morphism creation"],"fullName":"Graph Composition from() - Identity morphism creation should maintain type safety with branded Composition type","status":"passed","title":"should maintain type safety with branded Composition type","duration":0.13420799999994415,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","transform() - Function composition"],"fullName":"Graph Composition transform() - Function composition should compose two transformations correctly","status":"passed","title":"should compose two transformations correctly","duration":1.7719160000001466,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","transform() - Function composition"],"fullName":"Graph Composition transform() - Function composition should maintain proper edge relationships","status":"passed","title":"should maintain proper edge relationships","duration":0.35608400000000984,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","transform() - Function composition"],"fullName":"Graph Composition transform() - Function composition should handle chain of transformations","status":"passed","title":"should handle chain of transformations","duration":0.4133750000000873,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","Mathematical Properties"],"fullName":"Graph Composition Mathematical Properties should satisfy identity law: from(A).transform(id) ≡ from(A)","status":"passed","title":"should satisfy identity law: from(A).transform(id) ≡ from(A)","duration":0.23745800000006057,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","Mathematical Properties"],"fullName":"Graph Composition Mathematical Properties should satisfy associativity: (f ∘ g) ∘ h ≡ f ∘ (g ∘ h)","status":"passed","title":"should satisfy associativity: (f ∘ g) ∘ h ≡ f ∘ (g ∘ h)","duration":0.6185420000001614,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Composition","Error Cases"],"fullName":"Graph Composition Error Cases should handle missing target schema gracefully","status":"passed","title":"should handle missing target schema gracefully","duration":0.08233300000006238,"failureMessages":[],"meta":{}}],"startTime":1754480911085,"endTime":1754480911090.0823,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/GraphComposition.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should filter nodes by predicate","status":"passed","title":"should filter nodes by predicate","duration":1.5655000000000427,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should preserve graph structure","status":"passed","title":"should preserve graph structure","duration":0.3619580000000724,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should handle empty results","status":"passed","title":"should handle empty results","duration":0.09299999999996089,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should be idempotent: filter(P, filter(P, G)) = filter(P, G)","status":"passed","title":"should be idempotent: filter(P, filter(P, G)) = filter(P, G)","duration":0.33037500000000364,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should find first matching node","status":"passed","title":"should find first matching node","duration":1.4230000000000018,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should return None when no match found","status":"passed","title":"should return None when no match found","duration":0.5096670000000358,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should handle empty graphs","status":"passed","title":"should handle empty graphs","duration":0.2511250000000018,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should be deterministic for same predicate","status":"passed","title":"should be deterministic for same predicate","duration":0.5713329999999814,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should sort nodes according to ordering","status":"passed","title":"should sort nodes according to ordering","duration":0.31637499999999363,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should preserve all nodes","status":"passed","title":"should preserve all nodes","duration":0.18275000000005548,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should handle empty graphs","status":"passed","title":"should handle empty graphs","duration":0.058333000000061475,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should be stable for equal elements","status":"passed","title":"should be stable for equal elements","duration":0.1818749999999909,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should satisfy ordering laws","status":"passed","title":"should satisfy ordering laws","duration":0.5016669999999976,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should reverse correctly with reverse ordering","status":"passed","title":"should reverse correctly with reverse ordering","duration":0.2147499999999809,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Operation Composition"],"fullName":"Graph Operations Operation Composition should compose filter and sort correctly","status":"passed","title":"should compose filter and sort correctly","duration":0.18562499999995907,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Operation Composition"],"fullName":"Graph Operations Operation Composition should compose filter and find correctly","status":"passed","title":"should compose filter and find correctly","duration":0.21383399999990615,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Performance and Edge Cases"],"fullName":"Graph Operations Performance and Edge Cases should handle large graphs efficiently","status":"passed","title":"should handle large graphs efficiently","duration":11.00425000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Performance and Edge Cases"],"fullName":"Graph Operations Performance and Edge Cases should maintain referential transparency","status":"passed","title":"should maintain referential transparency","duration":0.5869999999999891,"failureMessages":[],"meta":{}}],"startTime":1754480910457,"endTime":1754480910475.587,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/GraphOperations.test.ts"},{"assertionResults":[{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter is idempotent: filter(P, filter(P, G)) = filter(P, G)","status":"passed","title":"filter is idempotent: filter(P, filter(P, G)) = filter(P, G)","duration":27.141042000000084,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter preserves predicate satisfaction","status":"passed","title":"filter preserves predicate satisfaction","duration":8.71854099999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter is monotonic: |filter(P, G)| ≤ |G|","status":"passed","title":"filter is monotonic: |filter(P, G)| ≤ |G|","duration":9.674040999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter with always-true predicate is identity","status":"passed","title":"filter with always-true predicate is identity","duration":6.866582999999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter with always-false predicate yields empty graph","status":"passed","title":"filter with always-false predicate yields empty graph","duration":14.00412499999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties AND is commutative: P ∧ Q ≡ Q ∧ P","status":"passed","title":"AND is commutative: P ∧ Q ≡ Q ∧ P","duration":1.1715840000000526,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties AND is associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","status":"passed","title":"AND is associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","duration":2.737374999999929,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties OR is commutative: P ∨ Q ≡ Q ∨ P","status":"passed","title":"OR is commutative: P ∨ Q ≡ Q ∨ P","duration":1.0870839999998907,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties De Morgan's law: ¬(P ∧ Q) ≡ ¬P ∨ ¬Q","status":"passed","title":"De Morgan's law: ¬(P ∧ Q) ≡ ¬P ∨ ¬Q","duration":2.081874999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties Double negation: ¬¬P ≡ P","status":"passed","title":"Double negation: ¬¬P ≡ P","duration":3.524041000000011,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Algebra Properties"],"fullName":"Property-Based Tests Algebra Properties count algebra is non-negative","status":"passed","title":"count algebra is non-negative","duration":4.798833000000059,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Algebra Properties"],"fullName":"Property-Based Tests Algebra Properties count with predicate ≤ count without predicate","status":"passed","title":"count with predicate ≤ count without predicate","duration":2.2633749999999964,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Algebra Properties"],"fullName":"Property-Based Tests Algebra Properties collectIds preserves node count","status":"passed","title":"collectIds preserves node count","duration":2.806874999999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants find returns None for empty graphs","status":"passed","title":"find returns None for empty graphs","duration":0.2694170000000895,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants find result satisfies predicate when Some","status":"passed","title":"find result satisfies predicate when Some","duration":2.379957999999988,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants sort preserves node count","status":"passed","title":"sort preserves node count","duration":8.744249999999965,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants sort is deterministic","status":"passed","title":"sort is deterministic","duration":3.9289589999999635,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Composition Laws"],"fullName":"Property-Based Tests Composition Laws filter composition: filter(P, filter(Q, G)) = filter(P ∧ Q, G)","status":"passed","title":"filter composition: filter(P, filter(Q, G)) = filter(P ∧ Q, G)","duration":5.397000000000048,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Composition Laws"],"fullName":"Property-Based Tests Composition Laws filter distributes over union predicates","status":"passed","title":"filter distributes over union predicates","duration":3.5158330000000433,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Error Handling Properties"],"fullName":"Property-Based Tests Error Handling Properties operations on empty graphs don't throw","status":"passed","title":"operations on empty graphs don't throw","duration":0.784041000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Error Handling Properties"],"fullName":"Property-Based Tests Error Handling Properties malformed predicates don't crash system","status":"passed","title":"malformed predicates don't crash system","duration":0.5667499999999563,"failureMessages":[],"meta":{}}],"startTime":1754480910458,"endTime":1754480910570.5667,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/PropertyBasedTests.test.ts"}]}