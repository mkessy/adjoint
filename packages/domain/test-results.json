{"numTotalTestSuites":36,"numPassedTestSuites":33,"numFailedTestSuites":3,"numPendingTestSuites":0,"numTotalTests":71,"numPassedTests":50,"numFailedTests":1,"numPendingTests":1,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1754265739004,"success":false,"testResults":[{"assertionResults":[],"startTime":1754265739004,"endTime":1754265739004,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/Dummy.test.ts"},{"assertionResults":[],"startTime":1754265739004,"endTime":1754265739004,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/algebra.test.ts"},{"assertionResults":[],"startTime":1754265739004,"endTime":1754265739004,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph Algebra","count algebra"],"fullName":"Graph Algebra count algebra should count all nodes when no predicate is provided","status":"passed","title":"should count all nodes when no predicate is provided","duration":2.2475829999999632,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","count algebra"],"fullName":"Graph Algebra count algebra should count nodes matching predicate","status":"passed","title":"should count nodes matching predicate","duration":0.3257089999999607,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","count algebra"],"fullName":"Graph Algebra count algebra should return 0 when no nodes match predicate","status":"passed","title":"should return 0 when no nodes match predicate","duration":0.2625830000000633,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","collectIds algebra"],"fullName":"Graph Algebra collectIds algebra should collect all node IDs in traversal order","status":"passed","title":"should collect all node IDs in traversal order","duration":0.4237500000000409,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","collectIds algebra"],"fullName":"Graph Algebra collectIds algebra should handle empty graphs","status":"passed","title":"should handle empty graphs","duration":0.1924579999999878,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","drawTree algebra"],"fullName":"Graph Algebra drawTree algebra should create string representation of single node","status":"passed","title":"should create string representation of single node","duration":0.15145800000004783,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","drawTree algebra"],"fullName":"Graph Algebra drawTree algebra should handle nodes with children","status":"passed","title":"should handle nodes with children","duration":0.3627920000000131,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Algebraic Laws"],"fullName":"Graph Algebra Algebraic Laws should satisfy catamorphism laws","status":"passed","title":"should satisfy catamorphism laws","duration":0.24225000000001273,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Algebraic Laws"],"fullName":"Graph Algebra Algebraic Laws should be compositional","status":"passed","title":"should be compositional","duration":0.3687079999999696,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Performance and Edge Cases"],"fullName":"Graph Algebra Performance and Edge Cases should handle large graphs efficiently","status":"passed","title":"should handle large graphs efficiently","duration":19.281207999999992,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Algebra","Performance and Edge Cases"],"fullName":"Graph Algebra Performance and Edge Cases should handle circular references gracefully","status":"skipped","title":"should handle circular references gracefully","failureMessages":[],"meta":{}}],"startTime":1754265739319,"endTime":1754265739343.2812,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/GraphAlgebra.test.ts"},{"assertionResults":[],"startTime":1754265739004,"endTime":1754265739004,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/GraphComposition.test.ts"},{"assertionResults":[{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should filter nodes by predicate","status":"passed","title":"should filter nodes by predicate","duration":1.3347089999999753,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should preserve graph structure","status":"passed","title":"should preserve graph structure","duration":0.37762499999996635,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should handle empty results","status":"passed","title":"should handle empty results","duration":0.08083399999998164,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","filter operation"],"fullName":"Graph Operations filter operation should be idempotent: filter(P, filter(P, G)) = filter(P, G)","status":"passed","title":"should be idempotent: filter(P, filter(P, G)) = filter(P, G)","duration":0.30645800000002055,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should find first matching node","status":"passed","title":"should find first matching node","duration":1.0543749999999363,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should return None when no match found","status":"passed","title":"should return None when no match found","duration":0.20829200000002857,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should handle empty graphs","status":"passed","title":"should handle empty graphs","duration":0.07637499999998454,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","find operation"],"fullName":"Graph Operations find operation should be deterministic for same predicate","status":"passed","title":"should be deterministic for same predicate","duration":0.26241700000002766,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should sort nodes according to ordering","status":"passed","title":"should sort nodes according to ordering","duration":0.2703749999999445,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should preserve all nodes","status":"passed","title":"should preserve all nodes","duration":0.1957919999999831,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should handle empty graphs","status":"passed","title":"should handle empty graphs","duration":0.0524159999999938,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should be stable for equal elements","status":"passed","title":"should be stable for equal elements","duration":0.16675000000009277,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should satisfy ordering laws","status":"passed","title":"should satisfy ordering laws","duration":0.25491699999997763,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","sort operation"],"fullName":"Graph Operations sort operation should reverse correctly with reverse ordering","status":"passed","title":"should reverse correctly with reverse ordering","duration":0.15983299999993505,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Operation Composition"],"fullName":"Graph Operations Operation Composition should compose filter and sort correctly","status":"passed","title":"should compose filter and sort correctly","duration":0.17104199999994307,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Operation Composition"],"fullName":"Graph Operations Operation Composition should compose filter and find correctly","status":"passed","title":"should compose filter and find correctly","duration":0.18566599999996924,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Performance and Edge Cases"],"fullName":"Graph Operations Performance and Edge Cases should handle large graphs efficiently","status":"passed","title":"should handle large graphs efficiently","duration":15.156124999999975,"failureMessages":[],"meta":{}},{"ancestorTitles":["Graph Operations","Performance and Edge Cases"],"fullName":"Graph Operations Performance and Edge Cases should maintain referential transparency","status":"passed","title":"should maintain referential transparency","duration":0.17458299999998417,"failureMessages":[],"meta":{}}],"startTime":1754265739318,"endTime":1754265739338.1746,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/GraphOperations.test.ts"},{"assertionResults":[{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter is idempotent: filter(P, filter(P, G)) = filter(P, G)","status":"passed","title":"filter is idempotent: filter(P, filter(P, G)) = filter(P, G)","duration":18.28845799999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter preserves predicate satisfaction","status":"failed","title":"filter preserves predicate satisfaction","duration":3.0547090000000026,"failureMessages":["Error: Property failed after 1 tests\n{ seed: -863331699, path: \"0:0:0\", endOnFailure: true }\nCounterexample: [{\"nodes\":{\n  \"_id\": \"HashMap\",\n  \"values\": []\n},\"edges\":{\n  \"_id\": \"Chunk\",\n  \"values\": []\n}},{\"_id\":Symbol.for(\"is-identity\"),\"evaluate\":(node) => isIdentityNode(node)}]\nShrunk 2 time(s)\nGot TypeError: filtered.nodes.values is not a function\n    at /Users/pooks/Dev/adjoint/packages/domain/test/graph/PropertyBasedTests.test.ts:92:44\n    at Property.predicate (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/property/Property.js:14:54)\n    at Property.run (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/property/Property.generic.js:46:33)\n    at runIt (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/Runner.js:18:30)\n    at check (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/Runner.js:62:11)\n    at Module.assert (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/Runner.js:65:17)\n    at /Users/pooks/Dev/adjoint/packages/domain/test/graph/PropertyBasedTests.test.ts:87:17\n    at file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n\nHint: Enable verbose mode in order to have the list of all failing values encountered during the run\n    at buildError (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/utils/RunDetailsFormatter.js:126:15)\n    at throwIfFailed (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/utils/RunDetailsFormatter.js:138:11)\n    at reportRunDetails (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/utils/RunDetailsFormatter.js:151:16)\n    at Module.assert (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/check/runner/Runner.js:69:9)\n    at /Users/pooks/Dev/adjoint/packages/domain/test/graph/PropertyBasedTests.test.ts:87:17\n    at file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///Users/pooks/Dev/adjoint/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)"],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter is monotonic: |filter(P, G)| ≤ |G|","status":"pending","title":"filter is monotonic: |filter(P, G)| ≤ |G|","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter with always-true predicate is identity","status":"pending","title":"filter with always-true predicate is identity","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Filter Properties"],"fullName":"Property-Based Tests Graph Filter Properties filter with always-false predicate yields empty graph","status":"pending","title":"filter with always-false predicate yields empty graph","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties AND is commutative: P ∧ Q ≡ Q ∧ P","status":"pending","title":"AND is commutative: P ∧ Q ≡ Q ∧ P","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties AND is associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","status":"pending","title":"AND is associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties OR is commutative: P ∨ Q ≡ Q ∨ P","status":"pending","title":"OR is commutative: P ∨ Q ≡ Q ∨ P","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties De Morgan's law: ¬(P ∧ Q) ≡ ¬P ∨ ¬Q","status":"pending","title":"De Morgan's law: ¬(P ∧ Q) ≡ ¬P ∨ ¬Q","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Predicate Combinator Properties"],"fullName":"Property-Based Tests Predicate Combinator Properties Double negation: ¬¬P ≡ P","status":"pending","title":"Double negation: ¬¬P ≡ P","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Algebra Properties"],"fullName":"Property-Based Tests Algebra Properties count algebra is non-negative","status":"pending","title":"count algebra is non-negative","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Algebra Properties"],"fullName":"Property-Based Tests Algebra Properties count with predicate ≤ count without predicate","status":"pending","title":"count with predicate ≤ count without predicate","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Algebra Properties"],"fullName":"Property-Based Tests Algebra Properties collectIds preserves node count","status":"pending","title":"collectIds preserves node count","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants find returns None for empty graphs","status":"pending","title":"find returns None for empty graphs","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants find result satisfies predicate when Some","status":"pending","title":"find result satisfies predicate when Some","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants sort preserves node count","status":"pending","title":"sort preserves node count","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Graph Operation Invariants"],"fullName":"Property-Based Tests Graph Operation Invariants sort is deterministic","status":"pending","title":"sort is deterministic","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Composition Laws"],"fullName":"Property-Based Tests Composition Laws filter composition: filter(P, filter(Q, G)) = filter(P ∧ Q, G)","status":"pending","title":"filter composition: filter(P, filter(Q, G)) = filter(P ∧ Q, G)","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Composition Laws"],"fullName":"Property-Based Tests Composition Laws filter distributes over union predicates","status":"pending","title":"filter distributes over union predicates","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Error Handling Properties"],"fullName":"Property-Based Tests Error Handling Properties operations on empty graphs don't throw","status":"pending","title":"operations on empty graphs don't throw","failureMessages":[],"meta":{}},{"ancestorTitles":["Property-Based Tests","Error Handling Properties"],"fullName":"Property-Based Tests Error Handling Properties malformed predicates don't crash system","status":"pending","title":"malformed predicates don't crash system","failureMessages":[],"meta":{}}],"startTime":1754265739318,"endTime":1754265739340.0547,"status":"failed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/graph/PropertyBasedTests.test.ts"},{"assertionResults":[{"ancestorTitles":["Node Capabilities","NodePredicate"],"fullName":"Node Capabilities NodePredicate should correctly identify node types","status":"passed","title":"should correctly identify node types","duration":0.8714169999999513,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodePredicate"],"fullName":"Node Capabilities NodePredicate should have unique identifiers","status":"passed","title":"should have unique identifiers","duration":0.3113749999999982,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should satisfy logical AND truth table","status":"passed","title":"should satisfy logical AND truth table","duration":0.17029200000001765,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should be commutative: P ∧ Q ≡ Q ∧ P","status":"passed","title":"should be commutative: P ∧ Q ≡ Q ∧ P","duration":0.1772919999999658,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should be associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","status":"passed","title":"should be associative: (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)","duration":0.09595799999999599,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","and combinator"],"fullName":"Node Capabilities Predicate Combinators and combinator should have identity element: P ∧ true ≡ P","status":"passed","title":"should have identity element: P ∧ true ≡ P","duration":0.07033300000000509,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","or combinator"],"fullName":"Node Capabilities Predicate Combinators or combinator should satisfy logical OR truth table","status":"passed","title":"should satisfy logical OR truth table","duration":0.1286249999999427,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","or combinator"],"fullName":"Node Capabilities Predicate Combinators or combinator should be commutative: P ∨ Q ≡ Q ∨ P","status":"passed","title":"should be commutative: P ∨ Q ≡ Q ∨ P","duration":0.0724999999999909,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","or combinator"],"fullName":"Node Capabilities Predicate Combinators or combinator should have identity element: P ∨ false ≡ P","status":"passed","title":"should have identity element: P ∨ false ≡ P","duration":0.06608299999993505,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","not combinator"],"fullName":"Node Capabilities Predicate Combinators not combinator should satisfy logical NOT","status":"passed","title":"should satisfy logical NOT","duration":0.0963329999999587,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","not combinator"],"fullName":"Node Capabilities Predicate Combinators not combinator should satisfy double negation: ¬¬P ≡ P","status":"passed","title":"should satisfy double negation: ¬¬P ≡ P","duration":0.06179199999996854,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","Predicate Combinators","not combinator"],"fullName":"Node Capabilities Predicate Combinators not combinator should satisfy De Morgan's laws","status":"passed","title":"should satisfy De Morgan's laws","duration":0.0860410000000229,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","CapabilityRegistry"],"fullName":"Node Capabilities CapabilityRegistry should register and retrieve predicates","status":"passed","title":"should register and retrieve predicates","duration":3.3894160000000966,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","CapabilityRegistry"],"fullName":"Node Capabilities CapabilityRegistry should handle multiple predicates","status":"passed","title":"should handle multiple predicates","duration":0.4942919999999731,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","CapabilityRegistry"],"fullName":"Node Capabilities CapabilityRegistry should maintain predicate isolation","status":"passed","title":"should maintain predicate isolation","duration":0.5065409999999702,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeEquivalence"],"fullName":"Node Capabilities NodeEquivalence should be reflexive: a ≡ a","status":"passed","title":"should be reflexive: a ≡ a","duration":0.06762500000002092,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeEquivalence"],"fullName":"Node Capabilities NodeEquivalence should be symmetric: a ≡ b ⟹ b ≡ a","status":"passed","title":"should be symmetric: a ≡ b ⟹ b ≡ a","duration":0.0741249999999809,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeEquivalence"],"fullName":"Node Capabilities NodeEquivalence should be transitive: a ≡ b ∧ b ≡ c ⟹ a ≡ c","status":"passed","title":"should be transitive: a ≡ b ∧ b ≡ c ⟹ a ≡ c","duration":0.0987920000000031,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeOrdering"],"fullName":"Node Capabilities NodeOrdering should be antisymmetric: a ≤ b ∧ b ≤ a ⟹ a = b","status":"passed","title":"should be antisymmetric: a ≤ b ∧ b ≤ a ⟹ a = b","duration":0.06691599999999198,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeOrdering"],"fullName":"Node Capabilities NodeOrdering should be transitive: a ≤ b ∧ b ≤ c ⟹ a ≤ c","status":"passed","title":"should be transitive: a ≤ b ∧ b ≤ c ⟹ a ≤ c","duration":0.12116599999990285,"failureMessages":[],"meta":{}},{"ancestorTitles":["Node Capabilities","NodeOrdering"],"fullName":"Node Capabilities NodeOrdering should be total: ∀a,b: a ≤ b ∨ b ≤ a","status":"passed","title":"should be total: ∀a,b: a ≤ b ∨ b ≤ a","duration":0.07237499999996544,"failureMessages":[],"meta":{}}],"startTime":1754265739317,"endTime":1754265739325.0723,"status":"passed","message":"","name":"/Users/pooks/Dev/adjoint/packages/domain/test/node/NodeCapabilities.test.ts"}]}